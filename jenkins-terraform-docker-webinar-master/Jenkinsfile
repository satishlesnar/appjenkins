pipeline {
    agent any

    parameters {
        string(name: 'serverIP', defaultValue: 'None', description: 'Enter target Host IP ')
        string(name: 'targetHost', defaultValue: 'None', description: 'Enter target host for deployment ')
        string(name: 'dockerUser', defaultValue: 'None', description: 'Enter Docker user name ')
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage('SCM checkout') {
            steps {
                git credentialsId: 'github-creds', url: 'https://github.com/satishlesnar/appjenkins.git', branch: 'main'
            }
        }

        stage('Build deployment image') {
            steps {
                script {
                    // Docker build context should be the Jenkins workspace
                    def buildContext = "${WORKSPACE}"
                    sh "sudo docker build ${buildContext} -t ${dockerUser}/devopsdemo --no-cache"
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    if (dockerUser != 'None') {
                        // Login to Docker Hub using provided credentials
                        sh "echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login --username ${dockerUser} --password-stdin"
                        sh "sudo docker push ${dockerUser}/devopsdemo:latest"
                    } else {
                        error "Docker username not provided."
                    }
                }
            }
        }

        stage('Delete old and Deploy new version on website') {
            steps {
                script {
                    // Define ports and deploy the Docker containers
                    def ports = ['81', '82', '83']
                    ports.each { port ->
                        sh "sudo docker run -tid -p ${port}:80 ${dockerUser}/devopsdemo:latest"
                    }
                }
            }
        }

        stage('Test the website') {
            steps {
                script {
                    // Define the ports and the server IP to test the website
                    def ports = ['81', '82', '83']
                    test_web(ports, params.serverIP)
                }
            }
        }
    }
}

def test_web(ports, serverIP) {
    script {
        ports.each { entry ->
            sh "curl -I http://${serverIP}:${entry}"
        }
    }
}
