pipeline {
    agent any

    parameters {
        string(name: 'serverIP', defaultValue: 'None', description: 'Enter target Host IP ')
        string(name: 'targetHost', defaultValue: 'None', description: 'Enter target host for deployment ')
        string(name: 'dockerUser', defaultValue: 'None', description: 'Enter Docker user name ')
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage('SCM checkout') {
            steps {
                git credentialsId: 'github-creds', url: 'https://github.com/satishlesnar/appjenkins.git', branch: 'main'
            }
        }

        stage('Build deployment image') {
            steps {
                script {
                    // Check the content of the subdirectory
                    sh "ls -la /var/lib/jenkins/workspace/jenkins-pipeline_main/jenkins-terraform-docker-webinar-master"

                    // Assuming the Dockerfile is inside the 'jenkins-terraform-docker-webinar-master' directory
                    sh "sudo docker build /var/lib/jenkins/workspace/jenkins-pipeline_main/jenkins-terraform-docker-webinar-master -t ${dockerUser}/devopsdemo --no-cache"
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    if (dockerUser != 'None') {
                        // Login to Docker Hub using provided credentials
                        sh "echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login --username ${dockerUser} --password-stdin"
                        sh "sudo docker push ${dockerUser}/devopsdemo:latest"
                    } else {
                        error "Docker username not provided."
                    }
                }
            }
        }

        stage('Stop and Remove Old Containers') {
            steps {
                script {
                    // Get the container IDs of running containers from the old image
                    def containers = sh(script: "sudo docker ps -q --filter 'ancestor=${dockerUser}/devopsdemo'", returnStdout: true).trim().split('\n')
                    
                    if (containers.size() > 0 && containers[0]) {
                        containers.each { container ->
                            echo "Stopping and removing container: ${container}"
                            sh "sudo docker stop ${container}"
                            sh "sudo docker rm ${container}"
                        }
                    } else {
                        echo "No old containers found for ${dockerUser}/devopsdemo."
                    }
                }
            }
        }

        stage('Delete old and Deploy new version on website') {
            steps {
                script {
                    // Define ports and deploy the Docker containers
                    def ports = ['81', '82', '83']
                    ports.each { port ->
                        sh "sudo docker run -tid -p ${port}:80 ${dockerUser}/devopsdemo:latest"
                    }
                }
            }
        }

        stage('Test the website') {
            steps {
                script {
                    // Define the ports and the server IP to test the website
                    def ports = ['81', '82', '83']
                    test_web(ports, params.serverIP)
                }
            }
        }
    }
}

def test_web(ports, serverIP) {
    script {
        ports.each { entry ->
            sh "curl -I http://${serverIP}:${entry}"
        }
    }
}
